name: Plan / Apply On Merge

on:
  push:
    branches:
      - main
      - master

jobs:
  inform_about_apply:
    name: Inform About Apply
    runs-on: ubuntu-20.04

    steps:
      - name: Inform on PR that Apply is Running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily... 
      
      - name: drift
        run: |
          message=$(cat tfplan.json | jq -r 'select(.type == "resourceO_drift")."@message"' | tr -d '"')
          if [[ -n $message ]]; then
            echo "$message"
          fi

#   plan_and_apply:
#     name: Plan and Apply
#     env:
#       TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
#       GH_TOKEN: ${{ github.token }}
#     runs-on: ubuntu-20.04
#     strategy:
#       fail-fast: false
#       matrix:
#         path:
#           - dev
# #           - stage
# #           - prod

#     steps:
#       - name: Check out code
#         uses: actions/checkout@v2

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v1
#         with:
#          terraform_version: 1.0.9

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         continue-on-error: true
#         with:
#           aws-region: us-east-1
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#       - name: expand log
#         run: gh run view --job plan_and_apply --log-failed
      
#       - name: Initialize Terraform
#         run: |
#           cd terraform/${{ matrix.path }}
#          terraform init -input=false          

#       - name: Plan Terraform
#         id: plan
#         continue-on-error: true
#         run: |
#           cd terraform/${{ matrix.path }}
#           terraform plan -input=false -no-color -out=tfplan \
#           && terraform show -no-color tfplan          

#       # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
#       # It stores the amount of spaces in `\1` and the +/- in `\2`.
#       # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
#       - name: Reformat Plan
#         if: steps.plan.outcome == 'success'
#         run: |
#           echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
#           | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt          

#       - name: Put Plan in Env Var
#         if: steps.plan.outcome == 'success'
#         run: |
#           PLAN=$(cat plan.txt)
#           echo "PLAN<<EOF" >> $GITHUB_ENV
#           echo "$PLAN" >> $GITHUB_ENV
#           echo "EOF" >> $GITHUB_ENV          

#       - name: Apply Terraform
#         if: steps.plan.outcome == 'success'
#         id: apply
#         continue-on-error: true
#         run: |
#           cd terraform/${{ matrix.path }}
#           terraform apply \
#             -input=false \
#             -no-color \
#             tfplan          

#       - name: Post Plan and Apply to GitHub PR
#         if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
#         uses: mshick/add-pr-comment@v1
#         with:
#           repo-token: ${{ secrets.GITHUB_TOKEN }}
#           repo-token-user-login: 'github-actions[bot]'
#           message: |
#             Applying **${{ matrix.path }}**:

#             ```diff
#             ${{ env.PLAN }}
#             ```

#             ```
#             ${{ steps.apply.outputs.stdout }}
#             ```            

#       - name: Post Plan Failure
#         if: steps.plan.outcome == 'failure'
#         uses: mshick/add-pr-comment@v1
#         with:
#           repo-token: ${{ secrets.GITHUB_TOKEN }}
#           repo-token-user-login: 'github-actions[bot]'
#           message: |
#             Plan failed for **${{ matrix.path }}**:

#             ```
#             ${{ steps.plan.outputs.stderr }}
#             ```            

#       - name: Post Apply Failure
#         if: steps.apply.outcome == 'failure'
#         uses: mshick/add-pr-comment@v1
#         with:
#           repo-token: ${{ secrets.GITHUB_TOKEN }}
#           repo-token-user-login: 'github-actions[bot]'
#           message: |
#             Apply failed for **${{ matrix.path }}**:

#             ```
#             ${{ steps.apply.outputs.stderr }}
#             ```            
